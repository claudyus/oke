#!/bin/bash
# Copyright (C) 2010 - Claudio Mignanti
#
# This is free software, licensed under the GNU General Public License v2.
# See /LICENSE for more information.
#

V=0.2

echo oke - Openwrt Kernel Extractor
echo ------------------------------
echo Version $V

#default value
branch=trunk
rev=HEAD
GDB="2> /dev/null"

pwd=`pwd`

_apply() {
	cd $pwd
	#files
	if [ -d $1/files-$kernel_patch ]; then
		cp -r $1/files-$kernel_patch/* \
			kernels/linux-$kernel/
	else
		cp -r $1/files/* \
			kernels/linux-$kernel/
	fi
	#patches
	if [ -d $1/patches-$kernel_patch ]; then
		cd kernels/linux-$kernel
		for pt in `ls $1/patches-$kernel_patch`; do
			echo $pt
			patch -p1 < $1/patches-$kernel_patch/$pt
		done
	else
		cd kernels/linux-$kernel
		for pt in `ls $1/patches`; do
			echo $pt
			patch -p1 < $1/patches/$pt
		done
	fi
	#configure
	if [ ! $config ]; then
		cd $pwd
		cat $1/config-$kernel_patch >> kernels/linux-$kernel/.config || \
		cat $1/config-default >> kernels/linux-$kernel/.config 
	fi
}


#parse command line
while [ $# -gt 0 ]; do
  case $1  in
	-a)
	  arch=$2
	  shift 2
	;;
	-r)
	  rev=$2
	  shift 2
	;;
	-b)
	  branch=$2
	  shift 2
	;;
	-g)
	  generic=0
	  shift 1
	;;
	-l)
	  list=1
	  shift 1
	;;
	-R)
	  recovery=1
	  shift 1
	;;
	--git)
	  git_repo=$2
	  shift 2
	;;
	-c)
	  config=0
	  shift 1
	;;
	*)
	  cat README
	  exit 0
	;;
  esac
done

if [ ! -d ./svn/$branch ]; then
	echo Checkuot svn ...
	mkdir -p svn
	case $branch in
		trunk)
		repo=svn://svn.openwrt.org/openwrt/trunk/target/linux
		;;
		backfire)
		repo=svn://svn.openwrt.org/openwrt/branches/backfire/target/linux
		;;
		kamikaze)
		repo=svn://svn.openwrt.org/openwrt/branches/8.09/target/linux
		;;
		*)
		echo Unsupported $branch 
		exit 0
		;;
	esac
	svn co $repo ./svn/$branch -r $rev
	cd ./svn/$branch
	svn_ver=`export LANG=en; svn info | grep Revision | grep -o [0-9]*`
else
	echo Updating svn ... 
	svn up ./svn/$branch -r $rev
	cd ./svn/$branch
	svn_ver=`export LANG=en; svn info | grep Revision | grep -o [0-9]*`
fi

if [ $list ]; then
	for a in `ls ./svn/$branch`; do
		if [ $a != "generic" ]; then
			echo $a
		fi
	done
	exit 0
fi

if [ $recovery ]; then
	rm -fr svn/
	exit 0
fi

cd $pwd

#parse kernel version
kernel=`grep -o 'LINUX_VERSION:=[0-9.]*' ./svn/$branch/$arch/Makefile | grep -o '[0-9.]*' $kernel`
kernel_patch=`echo $kernel | grep -o '^[0-9]*.[0-9]*.[0-9]*' -`
echo Detected $kernel_patch kernel version...

mkdir -p kernels
if [ ! -f kernels/linux-$kernel.ori.tar.bz2 ]; then
	echo Downloading kernel $kernel...
	wget -c ftp://ftp.kernel.org/pub/linux/kernel/v2.6/linux-$kernel.tar.bz2 -O kernels/linux-$kernel.tar.bz2  || exit 0 
fi

#prepare patched dir
echo Preparing kernel...
rm -fr kernels/linux-$kernel kernels/linux-$kernel.ori/
tar xvjf kernels/linux-$kernel.tar.bz2 -C kernels/ > /dev/null
mv  kernels/linux-$kernel/ kernels/linux-$kernel.ori

echo Preparing final dir...
cp -r kernels/linux-$kernel.ori kernels/linux-$kernel

#apply generic
if [ ! $generic ]; then
	echo Applying generic patches...
	#files
	_apply $pwd/svn/$branch/generic 

else
	echo WARNING: Skipping generic patches. See README
fi

#apply arch specific 
echo Applying arch patches...
#files
_apply $pwd/svn/$branch/$arch

#diff and tar
echo Cleanup pre-tar...
cd $pwd/kernels/linux-$kernel
$(find . -name '.svn' -exec rm -fr \{\} \;) $GDB
cd ..

echo Genereting unified patch...
echo unified patch from oke v$V for $arch platform generated: `date` \
	> $pwd/patch_"$kernel"_"$arch"_"$svn_ver".patch

cd $pwd/kernels
diff -Naur linux-$kernel.ori linux-$kernel \
	>> $pwd/patch_"$kernel"_"$arch"_"$svn_ver".patch 

if [ $git_repo ]; then
	#add the patches on git repo
	cd $git_repo
	git checkout v$kernel -f -b v$kernel-$arch
	patch -p1 < pwd/patch_"$kernel"_"$arch"_"$svn_ver".patch
	git add --all
	git commit --all -m "openwrt: $arch kernel from branch: $branch rev $rev"
	git checkout master
fi

echo Re-tar...
tar cjvf linux-$kernel-"$arch"_"$svn_ver".tar.bz2 linux-$kernel/* > /dev/null
mv linux-$kernel-"$arch"_"$svn_ver".tar.bz2 ..

echo Success!
echo linux-$kernel-"$arch"_"$svn_ver".tar.bz2 is now in oke dir.
