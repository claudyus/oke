#!/bin/bash
V=0.1rc1

echo oke - Openwrt Kernel Extractor
echo ------------------------------
echo version $V

#default value
branch=trunk
rev=HEAD
recovery=0
list=0
generic=1
GDB="> /dev/null"

pwd=`pwd`

#parse command line
while [ $# -gt 0 ]; do
  case $1  in
	-a)
	  arch=$2
	  shift 2
	;;
	-r)
	  rev=$2
	  shift 2
	;;
	-b)
	  branch=$2
	  shift 2
	;;
	-g)
	  generic=0
	  shift 1
	;;
	-l)
	  list=1
	  shift 1
	;;
	-R)
	  recovery=1
	  shift 1
	;;
	*)
	  cat README
	  exit 0
	;;
  esac
done

#checkout svn
if [ ! -d ./svn/$branch ]; then
	mkdir -p svn
	case $branch in
		trunk)
		repo=svn://svn.openwrt.org/openwrt/trunk/
		;;
		backfire)
		repo=svn://svn.openwrt.org/openwrt/branches/backfire
		;;
		kamikaze)
		repo=svn co svn://svn.openwrt.org/openwrt/branches/8.09
		;;
		*)
		echo Unsupported $branch 
		exit 0
		;;
	esac
	svn co $repo ./svn/$branch $GDB
fi

#parse kernel version
kernel=`grep -o 'LINUX_VERSION:=[0-9.]*' ./svn/$branch/target/linux/$arch/Makefile | grep -o '[0-9.]*' $kernel`
kernel_patch=`echo $kernel | grep -o '^[0-9]*.[0-9]*.[0-9]*' -`
echo $kernel_patch

mkdir -p kernels
if [ ! -f kernels/linux-$kernel.ori.tar.bz2 ]; then
	echo Downloading kernel $kernel...
	wget -c ftp://ftp.kernel.org/pub/linux/kernel/v2.6/linux-$kernel.tar.bz2 -O kernels/linux-$kernel.tar.bz2  $GDB
fi

#prepare patched dir
echo Preparing kernel...
rm -fr kernels/linux-$kernel kernels/linux-$kernel.ori/
tar xvjf kernels/linux-$kernel.tar.bz2 -C kernels/ $GDB
mkdir -p kernels/linux-$kernel.ori/
mv  kernels/linux-$kernel/* kernels/linux-$kernel.ori

echo Preparing final dir...
cp -r kernels/linux-$kernel.ori kernels/linux-$kernel

#apply generic
if [ $generic ]; then
	echo Applying generic patches...
	#files
	dir=./svn/$branch/target/linux/generic
	if [ -d $dir/files-$kernel_patch ]; then
		cp -r $dir/files-$kernel_patch/* \
			kernels/linux-$kernel/
	else
		cp -r $dir/files/* \
			kernels/linux-$kernel/
	fi

	#patches
	cd kernels/linux-$kernel
	for pt in `ls $pwd/$dir/patches-$kernel_patch`; do
		echo $pt
		patch -p1 < $pwd/$dir/patches-$kernel_patch/$pt 2>&1  $GDB
	done

else
	echo WARNING: Skipping generic patches. See README
fi

echo Applying arch patches...
cd $pwd
pwd
#files
dir=./svn/$branch/target/linux/$arch
if [ -d $dir/files-$kernel_patch ]; then
	cp -r $dir/files-$kernel_patch/* \
		kernels/linux-$kernel/
else
	cp -r $dir/files/* \
		kernels/linux-$kernel/
fi
#patches
if [ -d $dir/patches-$kernel_patch ]; then
	cd kernels/linux-$kernel
	for pt in `ls $pwd/$dir/patches-$kernel_patch`; do
		echo $pt
		patch -p1 < $pwd/$dir/patches-$kernel_patch/$pt  $GDB
	done
else
	for pt in `ls $pwd/$dir/patches`; do
		echo $pt
		patch -p1 < $pwd/$dir/patches/$pt
	done
fi

echo Cleanup pre-tar...
cd $pwd/kernels/linux-$kernel
find . -name '.svn' -exec rm -fr \{\} \;  $GDB
cd ..

echo Genereting unified patch...
echo unified patch from oke v$V for $arch platform generated:\n`date` \
	> $pwd/patch_$kernel.patch
diff -Naur $pwd/kernels/linux-$kernel.ori $pwd/kernels/linux-$kernel \
	>> $pwd/patch_$kernel_$arch.patch 

echo Re tar...
tar cjvf linux-$kernel-$arch.tar.bz2 linux-$kernel/*  $GDB
mv linux-$kernel-$arch.tar.bz2 ..

echo Success!
echo linux-$kernel-$arch.tar.bz2 is now in oke dir.
